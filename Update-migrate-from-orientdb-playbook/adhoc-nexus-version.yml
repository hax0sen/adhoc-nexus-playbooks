- name: Upgrade Nexus to New Version and Migrate to H2 Database
  hosts: nexus-legacy
  become: true
  gather_facts: true
  vars:
    # --- Core Configuration ---
    nexus_version: "3.70.4-02" # Run this version to update to Latest supported orienbtdb version before migrating to H2
    #nexus_version: "3.71.0-06" # Run this version to use H2 database with Java 17 support
    #nexus_version: "3.79.1-04" # Run latest version to use H2 database with Java 17 support possible to go from 3.70.4-02 to 3.79.1-04 directly
    nexus_download_url: "https://download.sonatype.com/nexus/3"
    nexus_download_dir: "/opt"
    nexus_os_user: "nexus"
    nexus_os_group: "nexus"
    nexus_systemd_unit: "/etc/systemd/system/nexus.service"
    nexus_backup_dir: "/var/my-nexus-backup"

    # --- User-defined or derived paths ---
    nexus_install_dir: "/opt/nexus-{{ nexus_version }}"
    nexus_latest_symlink: "/opt/nexus-latest"
    nexus_data_dir: "/var/nexus"

    # --- Derived Variables ---
    nexus_package: >-
      {% if nexus_version is version('3.71.0-06', '>=') %}
        nexus-{{ nexus_version }}-linux-x86_64.tar.gz
      {% elif nexus_version == '3.70.4-02' %}
        nexus-{{ nexus_version }}-java8-unix.tar.gz
      {% else %}
        nexus-{{ nexus_version }}-unix.tar.gz
      {% endif %}
    # Database migration variables
    nexus_migrator_jar: "nexus-db-migrator-{{ nexus_version }}.jar"
    nexus_migrator_url: "https://download.sonatype.com/nexus/nxrm3-migrator"

  tasks:
    - name: Ensure Java Prerequisites
      when: nexus_version is version('3.71.0-06', '>=')
      block:
        - name: Check if Java is installed
          ansible.builtin.command: java -version
          register: java_check
          ignore_errors: true

        - name: Fail if Java is not installed
          ansible.builtin.fail:
            msg: "Java is not installed on this system."
          when: java_check.rc != 0

        - name: Remove OpenJDK 1.8 (if upgrading to Java 17)
          ansible.builtin.dnf:
            name: java-1.8.0-openjdk
            state: absent

        - name: Install OpenJDK 17 (if required)
          ansible.builtin.dnf:
            name: java-17-openjdk
            state: present
      rescue:
        - name: Java prerequisite failure
          ansible.builtin.debug:
            msg: "Java installation or validation failed."

    - name: Manage Nexus Service and Download and Unpack Nexus
      block:
        - name: Check if Nexus systemd service file exists
          ansible.builtin.stat:
            path: "{{ nexus_systemd_unit }}"
          register: nexus_systemd_service_file

        - name: Stop Nexus systemd service if running
          ansible.builtin.systemd:
            name: nexus.service
            state: stopped
          when: nexus_systemd_service_file.stat.exists

        - name: Download Nexus package
          ansible.builtin.get_url:
            url: "{{ nexus_download_url }}/{{ nexus_package }}"
            dest: "{{ nexus_download_dir }}/{{ nexus_package }}"
            force: false
            validate_certs: "{{ nexus_download_ssl_verify | default(omit) }}"
            owner: "{{ nexus_os_user }}"
            group: "{{ nexus_os_group }}"
            mode: "0644"
          register: download_status
          until: download_status.status_code == 200
          retries: 5
          delay: 10

        - name: Unpack Nexus package
          ansible.builtin.unarchive:
            src: "{{ nexus_download_dir }}/{{ nexus_package }}"
            dest: "/opt"
            creates: "{{ nexus_install_dir }}"
            copy: false
            mode: "0755"

        - name: Set permissions on Nexus install directory
          ansible.builtin.file:
            path: "{{ nexus_install_dir }}"
            recurse: true
            mode: "u=rwX,g=rX,o=rX"

        - name: Set SELinux context on nexus binary (if enabled)
          community.general.sefcontext:
            target: "{{ nexus_install_dir }}/bin/nexus"
            setype: bin_t
            state: present
          when: ansible_selinux.status is defined and ansible_selinux.status == "enabled"

        - name: Update symlink to nexus-latest
          ansible.builtin.file:
            path: "{{ nexus_latest_symlink }}"
            src: "{{ nexus_install_dir }}"
            state: link
            owner: "{{ nexus_os_user }}"
            group: "{{ nexus_os_group }}"
            follow: false
      rescue:
        - name: Nexus download or unpack or permissions failure
          ansible.builtin.debug:
              msg: "Download or unpack of Nexus faile."

    - name: Configure Nexus VM Options
      block:
        - name: Set VM options
          ansible.builtin.lineinfile:
            path: "{{ nexus_latest_symlink }}/bin/nexus.vmoptions"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            state: present
          loop:
            - { regexp: '^-Dkaraf.data=.*', line: '-Dkaraf.data={{ nexus_data_dir }}' }
            - { regexp: '^-XX:LogFile=.*', line: '-XX:LogFile=../sonatype-work/nexus3/log/jvm.log' }
            - { regexp: '^-Dkaraf.log=.*', line: '-Dkaraf.log={{ nexus_data_dir }}/log' }
            - { regexp: '^-Duser.timezone=.*', line: '-Duser.timezone=UTC' }
            - { regexp: '^-Djava.io.tmpdir=.*', line: '-Djava.io.tmpdir={{ nexus_data_dir }}-tmp' }
            - { regexp: '^-Xms.*', line: '-Xms2703m' }
            - { regexp: '^-Xmx.*', line: '-Xmx2703m' }
            - { regexp: '^-XX:MaxDirectMemorySize=.*', line: '-XX:MaxDirectMemorySize=2703m' }

    - name: Prepare for H2 Migration (if applicable) # Manually backup fist via gui and save to backup dir {{ nexus_backup_dir }}
      when: nexus_version == "3.70.4-02"
      block:
        - name: Ensure backup directory exists
          ansible.builtin.file:
            path: "{{ nexus_backup_dir }}"
            state: directory
            owner: root
            group: root
            mode: "0755"

        - name: Download Nexus DB Migrator JAR
          ansible.builtin.get_url:
            url: "{{ nexus_migrator_url }}/{{ nexus_migrator_jar }}"
            dest: "{{ nexus_backup_dir }}/{{ nexus_migrator_jar }}"
            mode: "0644"
            owner: root
            group: root
            validate_certs: yes
    # Placeholder for starting Nexus and cleanup
    # - name: Start Nexus service. to avoid issue we skip this step see readme file for more details
    # - name: Clean up old directories/files. to avoid issue we skip this step see readme file for more details
